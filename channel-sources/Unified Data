{
  "name": "Unified Data",
  "description": "With this flow you can populate an ES index with Unified Data from multiple sources (Oracle, SQL Server, Redis, S3, Minio, Kafka etc)
  "groups": [
    {
      "key": "connectionInformation",
      "title": "Server Connection Information",
      "description": "Below provide the information required to connect to your unified data server."
    },
    {
      "key": "connectionCredential",
      "title": "Server Connection Credentials",
      "description": "Now that we know how to connect to your Unified Data, let's make sure we have the permission to do so."
    },
    {
      "key": "queryDetails",
      "title": "Query Details",
      "description": "Great, we are connected and down to business. Specify how often you want to update your data and the query you want to use"
    }
  ],
  "parameters": [
    {
      "type": "text",
      "group": "connectionInformation",
      "name": "server",
      "label": "Server",
      "description": "Server",
      "required": true
    },
    {
      "type": "text",
      "group": "connectionInformation",
      "name": "database",
      "label": "Database",
      "description": "Database"
    },
    {
      "type": "text",
      "group": "connectionCredential",
      "name": "userName",
      "label": "Username",
      "required": true
    },
    {
      "type": "password",
      "group": "connectionCredential",
      "name": "password",
      "label": "Password",
      "description": "Password",
      "required": true
    },
    {
      "type": "text",
      "group": "connectionCredential",
      "name": "domain",
      "label": "Domain",
      "description": "To use with Windows Authentication specify the domain here. Leave blank to login as a database user."
    },
    {
      "type": "boolean",
      "group": "connectionCredential",
      "name": "encrypt",
      "label": "Encrypt the Connection?",
      "description": "Set this to true if you need to encrypt the connection, this is usually required for Azure."
    },
    {
      "type": "text",
      "group": "queryDetails",
      "name": "updateFrequency",
      "label": "Update Frequency",
      "placeholder": "ex: Every 5 minutes",
      "description": "Specify the frequency of update in fairly natural language. Here are some examples<ul><li>\"every 15 minutes\"</li><li>\"on the last day of the month\"</li><li>\"at 5:00pm from Monday trought Friday\"</li></ul><br\\>For more examples click <a>here</a>.",
      "required": true
    },
    {
      "type": "boolean",
      "group": "queryDetails",
      "name": "truncate",
      "label": "Overwrite",
      "description": "Setting this to true will clear out existing data before loading new data. In otherwords this will 'Truncate' the data. Setting this to false allows incremental loading."
    },
    {
      "type": "text",
      "group": "queryDetails",
      "name": "uniqueField",
      "label": "Unique Field",
      "description": "Specifying a unique field with overwrite turned off allows for incremental loading of data. The unique field will prevent duplicates and allow updates. This also exposes the parameter latestUniqueField to the query. Use it to start the query at the right spot.",
      "required": false
    },
    {
      "type": "text",
      "group": "queryDetails",
      "name": "uniqueFieldStart",
      "label": "Unique Field Starting Position",
      "value": "0",
      "description": "Let's say that my unique field above is an autoincremented ID. I could use this field to start extracting data at an arbitrary ID rather than 0.",
      "required": false
    },
    {
      "type": "code",
      "group": "queryDetails",
      "name": "query",
      "label": "Query",
      "placeholder": "Query",
      "description": "Query",
      "required": true
    }
  ],
  "flow": {
    "label": "{{_name}}",
    "nodes": [
      {
          "id": "{{_id}}-core-1",
          "type": "comment",
          "name": "Load Configuration on Start-Up",
          "info": "",
          "x": 170,
          "y": 40,
          "wires": []
      },
      {
          "id": "{{_id}}-core-2",
          "type": "inject",
          "name": "",
          "topic": "",
          "payload": "",
          "payloadType": "date",
          "repeat": "",
          "crontab": "",
          "once": true,
          "x": 130,
          "y": 80,
          "wires": [
              [
                  "{{_id}}-core-3"
              ]
          ]
      },
      {
          "id": "{{_id}}-core-3",
          "type": "function",
          "name": "Format",
          "func": "msg = {\n    url: global.get('conveyor-api').url + '/flow/{{_url}}',\n    method: 'GET'\n}\n\n\nreturn msg;",
          "outputs": 1,
          "noerr": 0,
          "x": 280,
          "y": 80,
          "wires": [
              [
                  "{{_id}}-core-4"
              ]
          ]
      },
      {
          "id": "{{_id}}-core-4",
          "type": "http request",
          "name": "",
          "method": "use",
          "ret": "obj",
          "url": "",
          "tls": "",
          "x": 430,
          "y": 80,
          "wires": [
              [
                  "{{_id}}-core-39"
              ]
          ]
      },
      {
          "id": "{{_id}}-core-5",
          "type": "function",
          "name": "",
          "func": "var parameters = msg.payload.parameters;\nvar parameterNames = [];\n\nparameters.forEach(function(param) {\n    parameterNames.push(param.key)\n    \n    flow.set(param.key, param.value)\n})\n\nflow.set('params', parameterNames);\n\nreturn msg;",
          "outputs": 1,
          "noerr": 0,
          "x": 730,
          "y": 80,
          "wires": [
              [
                  "{{_id}}-33"
              ]
          ]
      },
      {
          "id": "{{_id}}-core-6",
          "type": "comment",
          "name": "Configuration Endpoints",
          "info": "",
          "x": 150,
          "y": 140,
          "wires": []
      },
      {
          "id": "{{_id}}-core-7",
          "type": "http in",
          "name": "",
          "url": "/{{_url}}/config",
          "method": "get",
          "upload": false,
          "swaggerDoc": "",
          "x": 160,
          "y": 180,
          "wires": [
              [
                  "{{_id}}-core-8"
              ]
          ]
      },
      {
          "id": "{{_id}}-core-8",
          "type": "function",
          "name": "",
          "func": "var paramNames = flow.get('params');\nvar parameters = {};\n\nparamNames.forEach(function(name) {\n    parameters[name] = flow.get(name);\n})\n\nmsg.payload = parameters\nreturn msg;",
          "outputs": 1,
          "noerr": 0,
          "x": 650,
          "y": 180,
          "wires": [
              [
                  "{{_id}}-core-9"
              ]
          ]
      },
      {
          "id": "{{_id}}-core-9",
          "type": "http response",
          "name": "",
          "statusCode": "",
          "headers": {},
          "x": 870,
          "y": 180,
          "wires": []
      },
      {
          "id": "{{_id}}-core-10",
          "type": "http in",
          "name": "",
          "url": "/{{_url}}/config",
          "method": "post",
          "upload": false,
          "swaggerDoc": "",
          "x": 160,
          "y": 220,
          "wires": [
              [
                  "{{_id}}-core-11"
              ]
          ]
      },
      {
          "id": "{{_id}}-core-11",
          "type": "function",
          "name": "",
          "func": "msg.payload = 'Post is currently not supported. Use PUT to update.'\nreturn msg;",
          "outputs": 1,
          "noerr": 0,
          "x": 650,
          "y": 220,
          "wires": [
              [
                  "{{_id}}-core-9"
              ]
          ]
      },
      {
          "id": "{{_id}}-core-12",
          "type": "http in",
          "name": "",
          "url": "/{{_url}}/config",
          "method": "put",
          "upload": false,
          "swaggerDoc": "",
          "x": 160,
          "y": 260,
          "wires": [
              [
                  "{{_id}}-core-13"
              ]
          ]
      },
      {
          "id": "{{_id}}-core-13",
          "type": "function",
          "name": "",
          "func": "var paramNames = flow.get('params');\nvar updates = [];\nvar errors = [];\n\nif (msg.payload) {\n    var paramsToUpdate = Object.keys(msg.payload);\n    \n    paramsToUpdate.forEach(function(update) {\n        if (paramNames.includes(update)) {\n            var updateParam = {\n                key: update,\n                value: msg.payload[update]\n            }\n            \n            updates.push(updateParam)\n        } else {\n            errors.push('Parameter [' + update + '] not valid.');\n        }\n    })\n} else {\n    errors.push('No Payload found');\n}\n\nif (errors.length > 0) {\n    msg.payload = errors\n} else {\n    updates.forEach(function(update) {\n        flow.set(update.key, update.value)\n    })\n    \n    var elasticParamsUpdate = [];\n    paramNames.forEach(function(param) {\n        elasticParamsUpdate.push({\n            \"key\": param,\n            \"value\": flow.get(param)\n        })\n    })\n    \n    msg.url = global.get('node-red').url + '/elasticsearch',\n    msg.method = 'POST',\n    msg.payload = {};\n    msg.payload.path = '/flow/default/{{_id}}/_update',\n    msg.payload.method = 'POST',\n    msg.payload.payload = {\n        \"doc\" : {\n        \"parameters\" : elasticParamsUpdate\n        }\n    }\n}\nreturn msg;",
          "outputs": 1,
          "noerr": 0,
          "x": 370,
          "y": 260,
          "wires": [
              [
                  "{{_id}}-core-18"
              ]
          ]
      },
      {
          "id": "{{_id}}-core-14",
          "type": "http in",
          "name": "",
          "url": "/{{_url}}/config",
          "method": "delete",
          "upload": false,
          "swaggerDoc": "",
          "x": 170,
          "y": 300,
          "wires": [
              [
                  "{{_id}}-core-15"
              ]
          ]
      },
      {
          "id": "{{_id}}-core-15",
          "type": "function",
          "name": "",
          "func": "msg.payload = 'Delete is currently not supported. Use PUT to update.'\nreturn msg;",
          "outputs": 1,
          "noerr": 0,
          "x": 650,
          "y": 300,
          "wires": [
              [
                  "{{_id}}-core-9"
              ]
          ]
      },
      {
          "id": "{{_id}}-core-16",
          "type": "http in",
          "name": "",
          "url": "/{{_url}}/config",
          "method": "patch",
          "upload": false,
          "swaggerDoc": "",
          "x": 160,
          "y": 340,
          "wires": [
              [
                  "{{_id}}-core-17"
              ]
          ]
      },
      {
          "id": "{{_id}}-core-17",
          "type": "function",
          "name": "",
          "func": "msg.payload = 'Patch is currently not supported. Use PUT to update.'\nreturn msg;",
          "outputs": 1,
          "noerr": 0,
          "x": 650,
          "y": 340,
          "wires": [
              [
                  "{{_id}}-core-9"
              ]
          ]
      },
      {
          "id": "{{_id}}-core-18",
          "type": "http request",
          "name": "",
          "method": "use",
          "ret": "txt",
          "url": "",
          "tls": "",
          "x": 510,
          "y": 260,
          "wires": [
              [
                  "{{_id}}-core-19"
              ]
          ]
      },
      {
          "id": "{{_id}}-core-19",
          "type": "function",
          "name": "",
          "func": "if (msg.statusCode != 200) {\n    msg.payload = 'Local Flow Configuration Updated, but not persisted.',\n    msg.statusCode = 500\n}\nreturn msg;",
          "outputs": 1,
          "noerr": 0,
          "x": 650,
          "y": 260,
          "wires": [
              [
                  "{{_id}}-core-9",
                  "{{_id}}-33"
              ]
          ]
      },
      {
          "id": "{{_id}}-core-20",
          "type": "comment",
          "name": "Data Endpoints",
          "info": "",
          "x": 120,
          "y": 400,
          "wires": []
      },
      {
          "id": "{{_id}}-core-21",
          "type": "http in",
          "name": "",
          "url": "/{{_url}}/data",
          "method": "get",
          "upload": false,
          "swaggerDoc": "",
          "x": 150,
          "y": 440,
          "wires": [
              [
                  "{{_id}}-core-22"
              ]
          ]
      },
      {
          "id": "{{_id}}-core-22",
          "type": "function",
          "name": "",
          "func": "msg.url = global.get('node-red').url + '/elasticsearch',\nmsg.method = 'POST',\nmsg.payload = {\n    path: '/{{_index}}/_search',\n    method: 'GET'\n}\n\nif (msg.req._parsedUrl.search) {\n    msg.payload.path += msg.req._parsedUrl.search\n}\nreturn msg;",
          "outputs": 1,
          "noerr": 0,
          "x": 370,
          "y": 440,
          "wires": [
              [
                  "{{_id}}-core-24"
              ]
          ]
      },
      {
          "id": "{{_id}}-core-23",
          "type": "http in",
          "name": "",
          "url": "/{{_url}}/data/:id",
          "method": "delete",
          "upload": false,
          "swaggerDoc": "",
          "x": 150,
          "y": 600,
          "wires": [
              [
                  "{{_id}}-core-37"
              ]
          ]
      },
      {
          "id": "{{_id}}-core-24",
          "type": "http request",
          "name": "",
          "method": "use",
          "ret": "obj",
          "url": "",
          "tls": "",
          "x": 510,
          "y": 440,
          "wires": [
              [
                  "{{_id}}-core-25"
              ]
          ]
      },
      {
          "id": "{{_id}}-core-25",
          "type": "function",
          "name": "",
          "func": "var data = [];\n\nif (msg.payload.hits && msg.payload.hits.hits) {\n    data = msg.payload.hits.hits;    \n}\n\nmsg.payload = data\n\nreturn msg;",
          "outputs": 1,
          "noerr": 0,
          "x": 650,
          "y": 440,
          "wires": [
              [
                  "{{_id}}-core-26"
              ]
          ]
      },
      {
          "id": "{{_id}}-core-26",
          "type": "http response",
          "name": "",
          "statusCode": "",
          "headers": {},
          "x": 870,
          "y": 520,
          "wires": []
      },
      {
          "id": "{{_id}}-core-27",
          "type": "http in",
          "name": "",
          "url": "/{{_url}}/data/:id",
          "method": "get",
          "upload": false,
          "swaggerDoc": "",
          "x": 160,
          "y": 480,
          "wires": [
              [
                  "{{_id}}-core-28"
              ]
          ]
      },
      {
          "id": "{{_id}}-core-28",
          "type": "function",
          "name": "",
          "func": "msg.url = global.get('node-red').url + '/elasticsearch',\nmsg.method = 'POST',\nmsg.payload = {\n    path: '/{{_index}}/default/' + msg.req.params.id,\n    method: 'GET'\n}\nreturn msg;",
          "outputs": 1,
          "noerr": 0,
          "x": 370,
          "y": 480,
          "wires": [
              [
                  "{{_id}}-core-29"
              ]
          ]
      },
      {
          "id": "{{_id}}-core-29",
          "type": "http request",
          "name": "",
          "method": "use",
          "ret": "obj",
          "url": "",
          "tls": "",
          "x": 510,
          "y": 480,
          "wires": [
              [
                  "{{_id}}-core-30"
              ]
          ]
      },
      {
          "id": "{{_id}}-core-30",
          "type": "function",
          "name": "",
          "func": "if (msg.payload.found === true && msg.payload._source) {\n    var data = msg.payload._source;\n}\n\nmsg.payload = data\n\nreturn msg;",
          "outputs": 1,
          "noerr": 0,
          "x": 650,
          "y": 480,
          "wires": [
              [
                  "{{_id}}-core-26"
              ]
          ]
      },
      {
          "id": "{{_id}}-core-31",
          "type": "http request",
          "name": "",
          "method": "use",
          "ret": "obj",
          "url": "",
          "tls": "",
          "x": 510,
          "y": 520,
          "wires": [
              [
                  "{{_id}}-core-26"
              ]
          ]
      },
      {
          "id": "{{_id}}-core-32",
          "type": "httpInMultipart",
          "name": "",
          "url": "/{{_url}}/data",
          "method": "post",
          "fields": "",
          "swaggerDoc": "",
          "x": 160,
          "y": 520,
          "wires": [
              [
                  "{{_id}}-core-33"
              ]
          ]
      },
      {
          "id": "{{_id}}-core-33",
          "type": "function",
          "name": "",
          "func": "var body = msg.payload;\n\nmsg.url = global.get('node-red').url + '/elasticsearch',\nmsg.method = 'POST',\nmsg.payload = {\n    path: '/{{_index}}/default',\n    method: 'POST',\n    payload: body\n}\nreturn msg;",
          "outputs": 1,
          "noerr": 0,
          "x": 370,
          "y": 520,
          "wires": [
              [
                  "{{_id}}-core-31"
              ]
          ]
      },
      {
          "id": "{{_id}}-core-34",
          "type": "http in",
          "name": "",
          "url": "/{{_url}}/data/:id",
          "method": "put",
          "upload": false,
          "swaggerDoc": "",
          "x": 160,
          "y": 560,
          "wires": [
              [
                  "{{_id}}-core-35"
              ]
          ]
      },
      {
          "id": "{{_id}}-core-35",
          "type": "function",
          "name": "",
          "func": "var body = msg.payload;\n\nmsg.url = global.get('node-red').url + '/elasticsearch',\nmsg.method = 'POST',\nmsg.payload = {\n    path: '/{{_index}}/default/' + msg.req.params.id,\n    method: 'PUT',\n    payload: body\n}\nreturn msg;",
          "outputs": 1,
          "noerr": 0,
          "x": 370,
          "y": 560,
          "wires": [
              [
                  "{{_id}}-core-36"
              ]
          ]
      },
      {
          "id": "{{_id}}-core-36",
          "type": "http request",
          "name": "",
          "method": "use",
          "ret": "txt",
          "url": "",
          "tls": "",
          "x": 510,
          "y": 560,
          "wires": [
              [
                  "{{_id}}-core-26"
              ]
          ]
      },
      {
          "id": "{{_id}}-core-37",
          "type": "function",
          "name": "",
          "func": "msg.url = global.get('node-red').url + '/elasticsearch',\nmsg.method = 'POST',\nmsg.payload = {\n    path: '/{{_index}}/default/' + msg.req.params.id,\n    method: 'DELETE'\n}\nreturn msg;",
          "outputs": 1,
          "noerr": 0,
          "x": 370,
          "y": 600,
          "wires": [
              [
                  "{{_id}}-core-38"
              ]
          ]
      },
      {
          "id": "{{_id}}-core-38",
          "type": "http request",
          "name": "",
          "method": "use",
          "ret": "txt",
          "url": "",
          "tls": "",
          "x": 510,
          "y": 600,
          "wires": [
              [
                  "{{_id}}-core-26"
              ]
          ]
      },
      {
          "id": "{{_id}}-core-39",
          "type": "switch",
          "name": "",
          "property": "statusCode",
          "propertyType": "msg",
          "rules": [
              {
                  "vt": "num",
                  "t": "eq",
                  "v": "200"
              },
              {
                  "t": "else"
              }
          ],
          "checkall": "true",
          "outputs": 2,
          "x": 570,
          "y": 80,
          "wires": [
              [
                  "{{_id}}-core-5"
              ],
              [
                  "{{_id}}-core-40"
              ]
          ]
      },
      {
          "id": "{{_id}}-core-40",
          "type": "delay",
          "name": "",
          "pauseType": "delay",
          "timeout": "5",
          "timeoutUnits": "seconds",
          "rate": "1",
          "nbRateUnits": "1",
          "rateUnits": "second",
          "randomFirst": "1",
          "randomLast": "5",
          "randomUnits": "seconds",
          "drop": false,
          "x": 440,
          "y": 120,
          "wires": [
              [
                  "{{_id}}-core-3"
              ]
          ]
      },
      {
          "id": "{{_id}}-3",
          "type": "later",
          "name": "",
          "schedule": "",
          "x": 310,
          "y": 700,
          "wires": [
              [
                  "{{_id}}-4"
              ]
          ]
      },
      {
          "id": "{{_id}}-5",
          "type": "debug",
          "name": "These Are Errors!",
          "active": true,
          "console": "false",
          "complete": "true",
          "x": 1070,
          "y": 660,
          "wires": []
      },
      {
        "id": "{{_id}}-6",
        "type": "template",
        "name": "Query",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{{query}}}",
        "output": "str",
        "x": 190,
        "y": 900,
        "wires": [
            [
                "{{_id}}-7"
            ]
        ]
    },
      {
          "id": "{{_id}}-7",
          "type": "prestoclient",
          "PrestoClient-CN": "{{_id}}-8",
          "name": "",
          "query": "",
          "outField": "payload",
          "x": 310,
          "y": 900,
          "wires": [
              [
                  "{{_id}}-9"
              ]
          ]
      },
      {
          "id": "{{_id}}-4",
          "type": "function",
          "name": "Verify Later Parse",
          "func": "if (msg.later) {\n    return [null, msg]\n} else {\n    return [msg, null];\n}",
          "outputs": "2",
          "noerr": 0,
          "x": 470,
          "y": 700,
          "wires": [
              [
                  "{{_id}}-29"
              ],
              [
                  "{{_id}}-10"
              ]
          ]
      },
      {
          "id": "{{_id}}-11",
          "type": "function",
          "name": "",
          "func": "var operation = {\n    \"_index\": \"{{_index}}\",\n    \"_type\": \"default\"\n    }\n    \nvar uniqueField = flow.get('uniqueField')\n\nif (uniqueField && uniqueField !== '' && msg.payload[uniqueField]) {\n    operation['_id'] = msg.payload[uniqueField]\n    \n    if (msg.parts.index == msg.parts.count - 1) {\n        flow.set('latestUniqueField', msg.payload[uniqueField])\n    }\n}\n\nvar msg1 = {\n    payload: JSON.stringify({index: operation})\n}\n\nvar msg2 = {\n    payload: JSON.stringify(msg.payload)\n}\n\nif (msg.parts.index == (msg.parts.count - 1)) {\n    msg2.complete = true\n}\n\nreturn [[msg1,msg2]];",
          "outputs": "1",
          "noerr": 0,
          "x": 550,
          "y": 900,
          "wires": [
              [
                  "{{_id}}-12"
              ]
          ]
      },
      {
          "id": "{{_id}}-9",
          "type": "split",
          "name": "",
          "splt": "\\n",
          "x": 430,
          "y": 900,
          "wires": [
              [
                  "{{_id}}-11"
              ]
          ]
      },
      {
          "id": "{{_id}}-12",
          "type": "join",
          "name": "",
          "mode": "custom",
          "build": "string",
          "property": "payload",
          "propertyType": "msg",
          "key": "topic",
          "joiner": "\\n",
          "joinerType": "str",
          "accumulate": false,
          "timeout": "",
          "count": "1000",
          "x": 670,
          "y": 900,
          "wires": [
              [
                  "{{_id}}-13"
              ]
          ]
      },
      {
          "id": "{{_id}}-14",
          "type": "http request",
          "name": "",
          "method": "use",
          "ret": "obj",
          "url": "",
          "tls": "",
          "x": 930,
          "y": 900,
          "wires": [
              []
          ]
      },
      {
          "id": "{{_id}}-13",
          "type": "function",
          "name": "",
          "func": "var bulkInsert = msg.payload;\nbulkInsert += \"\\n\";\n\nmsg = {\n    url: global.get('node-red').url + '/elasticsearch',\n    method: 'POST',\n    payload: {\n        path: '/_bulk',\n        method: 'POST',\n        payload: bulkInsert\n    }\n}\n\nreturn msg;",
          "outputs": 1,
          "noerr": 0,
          "x": 790,
          "y": 900,
          "wires": [
              [
                  "{{_id}}-14"
              ]
          ]
      },
      {
          "id": "{{_id}}-16",
          "type": "link out",
          "name": "Truncate",
          "links": [
              "{{_id}}-17"
          ],
          "x": 855,
          "y": 740,
          "wires": []
      },
      {
          "id": "{{_id}}-17",
          "type": "link in",
          "name": "Truncate In",
          "links": [
              "{{_id}}-16"
          ],
          "x": 95,
          "y": 800,
          "wires": [
              [
                  "{{_id}}-18"
              ]
          ]
      },
      {
          "id": "{{_id}}-19",
          "type": "comment",
          "name": "Truncate Existing Data",
          "info": "",
          "x": 160,
          "y": 760,
          "wires": []
      },
      {
          "id": "{{_id}}-20",
          "type": "http request",
          "name": "",
          "method": "use",
          "ret": "obj",
          "url": "",
          "tls": "",
          "x": 610,
          "y": 800,
          "wires": [
              [
                  "{{_id}}-21"
              ]
          ]
      },
      {
          "id": "{{_id}}-22",
          "type": "link out",
          "name": "Query",
          "links": [
              "{{_id}}-23"
          ],
          "x": 855,
          "y": 840,
          "wires": []
      },
      {
          "id": "{{_id}}-23",
          "type": "link in",
          "name": "Query In",
          "links": [
              "{{_id}}-22",
              "{{_id}}-28"
          ],
          "x": 95,
          "y": 900,
          "wires": [
              [
                  "{{_id}}-6"
              ]
          ]
      },
      {
          "id": "{{_id}}-24",
          "type": "comment",
          "name": "Query New Data",
          "info": "",
          "x": 140,
          "y": 860,
          "wires": []
      },
      {
          "id": "{{_id}}-21",
          "type": "function",
          "name": "",
          "func": "if (msg.statusCode && msg.statusCode == 200) {\n    return [null, msg]\n} else {\n    return [msg, null]\n}",
          "outputs": "2",
          "noerr": 0,
          "x": 750,
          "y": 800,
          "wires": [
              [
                  "{{_id}}-31"
              ],
              [
                  "{{_id}}-22"
              ]
          ]
      },
      {
          "id": "{{_id}}-25",
          "type": "function",
          "name": "",
          "func": "if (msg.statusCode == 200) {\n\n    msg.payload = {\n        path: '/{{_index}}/_delete_by_query',\n        method: 'POST',\n        payload: {\n            \"query\": {\n                \"match_all\": {}\n            }\n        }\n    }\n\n    return [msg, null]\n} else {\n    return [null, {}]    \n}",
          "outputs": "2",
          "noerr": 0,
          "x": 470,
          "y": 820,
          "wires": [
              [
                  "{{_id}}-20"
              ],
              [
                  "{{_id}}-22"
              ]
          ]
      },
      {
          "id": "{{_id}}-26",
          "type": "http request",
          "name": "",
          "method": "use",
          "ret": "txt",
          "url": "",
          "tls": "",
          "x": 330,
          "y": 800,
          "wires": [
              [
                  "{{_id}}-25"
              ]
          ]
      },
      {
          "id": "{{_id}}-18",
          "type": "function",
          "name": "",
          "func": "msg = {\n    method: 'POST',\n    url: global.get('node-red').url + '/elasticsearch',\n    payload: {\n        method: 'HEAD',\n        path: '/{{_index}}'\n    }\n}\n\nreturn msg;",
          "outputs": 1,
          "noerr": 0,
          "x": 190,
          "y": 800,
          "wires": [
              [
                  "{{_id}}-26"
              ]
          ]
      },
      {
          "id": "{{_id}}-10",
          "type": "switch",
          "name": "",
          "property": "truncate",
          "propertyType": "flow",
          "rules": [
              {
                  "vt": "str",
                  "t": "eq",
                  "v": "true"
              },
              {
                  "t": "else"
              }
          ],
          "checkall": "false",
          "outputs": 2,
          "x": 630,
          "y": 720,
          "wires": [
              [
                  "{{_id}}-16"
              ],
              [
                  "{{_id}}-28"
              ]
          ]
      },
      {
          "id": "{{_id}}-27",
          "type": "comment",
          "name": "Primary Flow",
          "info": "",
          "x": 110,
          "y": 660,
          "wires": []
      },
      {
          "id": "{{_id}}-28",
          "type": "link out",
          "name": "Query",
          "links": [
              "{{_id}}-23"
          ],
          "x": 855,
          "y": 700,
          "wires": []
      },
      {
          "id": "{{_id}}-29",
          "type": "link out",
          "name": "Error Out",
          "links": [
              "{{_id}}-30"
          ],
          "x": 855,
          "y": 660,
          "wires": []
      },
      {
          "id": "{{_id}}-30",
          "type": "link in",
          "name": "",
          "links": [
              "{{_id}}-29",
              "{{_id}}-31"
          ],
          "x": 935,
          "y": 660,
          "wires": [
              [
                  "{{_id}}-5"
              ]
          ]
      },
      {
          "id": "{{_id}}-31",
          "type": "link out",
          "name": "Error Out",
          "links": [
              "{{_id}}-30"
          ],
          "x": 855,
          "y": 800,
          "wires": []
      },
      {
          "id": "{{_id}}-32",
          "type": "function",
          "name": "",
          "func": "var updateFrequency = JSON.parse(flow.get('updateFrequency'))\n\nmsg.payload = {\n    later: updateFrequency\n}\n\nreturn msg;",
          "outputs": 1,
          "noerr": 0,
          "x": 190,
          "y": 700,
          "wires": [
              [
                  "{{_id}}-3"
              ]
          ]
      },
      {
          "id": "{{_id}}-33",
          "type": "link out",
          "name": "Start Primary Flow",
          "links": [
              "{{_id}}-34"
          ],
          "x": 835,
          "y": 80,
          "wires": []
      },
      {
          "id": "{{_id}}-34",
          "type": "link in",
          "name": "",
          "links": [
              "{{_id}}-33"
          ],
          "x": 95,
          "y": 700,
          "wires": [
              [
                  "{{_id}}-32"
              ]
          ]
      },
      {
        "name": "Connection for {{_name}}",
        "database": "{{database}}",
        "server": "{{server}}",
        "encyption": "{{encrypt}}",
        "credentials": {
          "username": "{{userName}}",
          "domain": "{{domain}}",
          "password": "{{password}}"
        },
        "type": "PrestoClient-CN",
        "id": "{{_id}}-8"
      }
  ]
  }
}
